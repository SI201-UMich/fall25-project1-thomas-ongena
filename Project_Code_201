import csv

def load_data(fname):
     import csv 
     with open(fname, 'r') as csv_file: 
         reader = csv.DictReader(csv_file)
         data = list(reader)
         return data 
    

def calculation_1(data):
    if not data: 
        return {} 
    required_columns = {'Region', 'Sales', 'Category'}
    west_data = []
    for row in data: 
        if row['Region'] == 'West': 
            west_data.append(row)
    category_counts = {} 
    for row in west_data: 
        cat = row['Category']
        if cat in category_counts: 
            category_counts[cat] += 1
        else: 
            category_counts[cat] = 1
    high_sales_west = [] 
    for row in west_data: 
        try: 
            sales_value = float(row['Sales'])
        except ValueError: 
            continue 
        if sales_value > 500: 
            high_sales_west.append(row)
    high_counts = [] 
    for row in high_sales_west: 
        cat = row['Category']
        high_counts[cat] = high_counts.get(cat, 0) +1 
    percentages = {} 
    for cat, total_count in category_counts.items(): 
        high_count = high_counts.get(cat, 0)
        if total_count > 0: 
            perc = (high_count / total_count) * 100 
        else: 
            percentages[cat] = 0.0 
    return percentages 

def calculation_2(data):
    if not data: 
        return 0.0
    required_columns = ['Segment', 'Ship Mode', 'Sales']
    corporate_data = []
    for row in data: 
        if row['Segment'] == 'Corporate': 
            corporate_data.append(row)
    first_class_corp = []
    for row in corporate_data: 
        if row['Ship Mode'] == 'First Class': 
            first_class_corp.append(row)
    total_sales = 0.0 
    count = 0 
    for row in first_class_corp: 
        try: 
            sales_value = float(row['Sales'])
            total_sales += sales_value 
            count += 1 
        except ValueError: 
            continue 
    average_sale = total_sales / count 
    average_sale = round(average_sale, 2)
    return average_sale 


def push_changes(percentages, average_sale):
    if not isinstance(percentages, dict) or not isinstance(average_sale, float): 
        return 
    with open('project_results.csv', 'w', newline='') as csvfile: 
        writer = csv.writer(csvfile)
        writer.writerow(['Category', 'Value'])
        for category, perc in percentages.items(): 
            writer.writerow([category, f"{perc}%"])
        writer.writerow(['Average Corporate First Class Sale', average_sale])


def main(): 
    data = load_data('SampleSuperstore.csv')
    if not data: 
        print('Failed to load data.')
        return
    try: 
        percentages = calculation_1(data)
        average_sale = calculation_2(data)
        push_changes(percentages, average_sale)
    except: 
        print('An error occurred.')
        return 
    if __name__ == "__main__": 
        main() 

# -- TEST CASES -- 

from io import StringIO 

def test_load_data(): 

    # TEST 1 
    mock_csv = StringIO("Region,Sales,Category\nWest,600.50,Office Supplies\nEast,200.75,Furniture")
    result = load_data(mock_csv)
    assert len(result) == 2
    assert result[0] == {'Region': 'West', 'Sales': '600.50', 'Category': 'Office Supplies'}
    assert result[1] == {'Region': 'East', 'Sales': '200.75', 'Category': 'Furniture'}
    mock_csv.close() 

    # TEST 2 
    mock_csv = StringIO("Region,Sales,Category\nWest,300.25,Technology")
    result = load_data(mock_csv)
    assert len(result) == 1
    assert result[0] == {'Region': 'West', 'Sales': '300.25', 'Category': 'Technology'}
    mock_csv.close() 

    # TEST 3 
    mock_csv = StringIO("Region,Sales,Category\n")
    result = load_data(mock_csv)
    assert len(result) == 0 
    mock_csv.close() 

    # TEST 4 
    result = load_data(StringIO(""))
    assert len(result) == 0 


def test_calculation_1():

    mock_data = [
        {'Region': 'West', 'Sales': '600.50', 'Category': 'Office Supplies'},
        {'Region': 'West', 'Sales': '400.25', 'Category': 'Office Supplies'},
        {'Region': 'West', 'Sales': '700.75', 'Category': 'Furniture'},
        {'Region': 'East', 'Sales': '300.00', 'Category': 'Technology'}
    ]

    # TEST 1 
    result = calculation_1(mock_data)
    assert len(result) == 2
    assert result['Office Supplies'] == 50.0
    assert result['Furniture'] == 100.0 
    assert 'Technology' not in result 

    # TEST 2 
    mock_data_no_high = [
        {'Region': 'West', 'Sales': '400.00', 'Category': 'Office Supplies'},
        {'Region': 'West', 'Sales': '300.50', 'Category': 'Furniture'},
        {'Region': 'West', 'Sales': '200.75', 'Category': 'Technology'}
    ]
    result = calculation_1(mock_data_no_high)
    assert len(result) == 3
    assert result['Office Supplies'] == 0.0
    assert result['Furniture'] == 0.0 
    assert result['Technology'] == 0.0

    # TEST 3 
    result = calculation_1([])
    assert result == {} 

    # TEST 4 
    mock_data_invalid = [
        {'Region': 'West', 'Sales': 'invalid', 'Category': 'Office Supplies'},
        {'Region': 'West', 'Sales': '600.00', 'Category': 'Office Supplies'},
        {'Region': 'West', 'Sales': '800.00', 'Category': 'Furniture'}
    ]
    result = calculation_1(mock_data_invalid)
    assert len(result) == 2 
    assert result['Office Supplies'] == 50.0 
    assert result['Furniture'] == 100.0

def test_calculation_2():

    mock_data = [
        {'Segment': 'Corporate', 'Ship Mode': 'First Class', 'Sales': '250.75'},
        {'Segment': 'Corporate', 'Ship Mode': 'Standard', 'Sales': '150.50'},
        {'Segment': 'Consumer', 'Ship Mode': 'First Class', 'Sales': '300.00'},
        {'Segment': 'Corporate', 'Ship Mode': 'First Class', 'Sales': '350.25'}
    ]

    # TEST 1 
    result = calculation_2(mock_data)
    expected_avg = (250.75 + 350.25) / 2 
    assert result == round(expected_avg, 2)

    # TEST 2 
    mock_data_single = [
        {'Segment': 'Corporate', 'Ship Mode': 'First Class', 'Sales': '400.00'},
        {'Segment': 'Corporate', 'Ship Mode': 'Standard', 'Sales': '200.00'}
    ]
    result = calculation_2(mock_data_single)
    assert result == 400.00

    # TEST 3 
    mock_data_no_match = [
        {'Segment': 'Consumer', 'Ship Mode': 'Standard', 'Sales': '100.00'},
        {'Segment': 'Consumer', 'Ship Mode': 'First Class', 'Sales': '200.00'}
    ]
    result = calculation_2(mock_data_no_match)
    assert result == 0.0 

    # TEST 4 
    mock_data_invalid = [
        {'Segment': 'Corporate', 'Ship Mode': 'First Class', 'Sales': 'invalid'},
        {'Segment': 'Corporate', 'Ship Mode': 'First Class', 'Sales': '500.00'},
        {'Segment': 'Corporate', 'Ship Mode': 'Standard', 'Sales': '300.00'}
    ]
    result = calculation_2(mock_data_invalid)
    assert result == 500.00 

   



